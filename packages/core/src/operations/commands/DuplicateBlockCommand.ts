import type { 
  ICommand, 
  IOperation, 
  OperationContext
} from '../types';
import { AddBlockCommand } from './AddBlockCommand';
import { generateId } from '../../utils';

/**
 * Command to duplicate an existing block
 */
export class DuplicateBlockCommand implements ICommand {
  public readonly id: string;
  public readonly name = 'duplicate-block' as const;
  public readonly description: string;

  constructor(public readonly sourceBlockId: string) {
    this.id = generateId();
    this.description = `Duplicate block ${sourceBlockId}`;
  }

  createOperations(context: OperationContext): IOperation[] {
    if (!context.blockManager) {
      return [];
    }

    // Get source block data
    const sourceBlock = context.blockManager.getBlock(this.sourceBlockId);
    if (!sourceBlock) {
      return [];
    }

    // Create new block data with offset position
    const newBlockData = { 
      ...sourceBlock,
      id: undefined, // Will be generated by AddBlockCommand
      position: {
        ...sourceBlock.position,
        x: sourceBlock.position.x + 1,
        y: sourceBlock.position.y + 1,
      }
    };

    // Use AddBlockCommand to create the duplicate
    const addCommand = new AddBlockCommand(newBlockData);
    return addCommand.createOperations(context);
  }

  canExecute(context: OperationContext): boolean {
    if (!context.blockManager) {
      return false;
    }

    const sourceBlock = context.blockManager.getBlock(this.sourceBlockId);
    return !!sourceBlock;
  }

  getMetadata(): Record<string, any> {
    return {
      sourceBlockId: this.sourceBlockId,
    };
  }
}